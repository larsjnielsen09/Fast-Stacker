DIY automated macro rail for focus stacking based on Arduino

******************************************************* Main Page **************************************************************


https://farm1.staticflickr.com/669/22372013172_5ffe4d7e89_c.jpg

* Legal disclaimer
<span style="background:#ffff00">
This documentation is a description of my DIY project, posted here is for the benefit of the community. I cannot guarantee that there are no mistakes in my description or my software posted here. I shall bear no responsibility whatsoever if anyone will get hurt or will suffer a financial loss (for example, by damaging his/her DSLR camera) while trying to follow this description. This documentation should be treated "as is", with no explicit or implicit guarantee that the device will perform as intended.
</span>
* [[Specifications]]
* [[Introduction]]
* [[Hardware]]
* [[Software]]
* [[Warnings]]: You have to read this if your camera is not Canon!
* [[User guide]]
* Youtube videos
** [https://www.youtube.com/watch?v=IsDcmt_CyNQ Live demonstration (35 min.)]
** [https://www.youtube.com/watch?v=W2mPlAImV9o One of my earlier tests (50 seconds), where you can clearly see the two brackets used to attach the motor to the rail.]
* Example stacked photographs
** [https://www.flickr.com/photos/syamastro/21490797273 Fly (151 frames):] <span class="plainlinks">[https://farm6.staticflickr.com/5675/21490797273_bfcc884ec9_o.jpg https://c2.staticflickr.com/6/5675/21490797273_1ac3411a60_m_d.jpg]</span>


************************************************* Specifications *****************************************************************

{| style="background:#fbfffa; text-align: left;" border="1"
|- style="background:#9aff88;border-bottom: 3px solid grey;" align="left" ;
! Parameter !! Value !! Comments
|-
|Maximum stacking depth || 58 mm || Approximately. The precise number will depend on your placement of the two micro-switches.
|-
|Maximum speed<ref name="soft" /> || 5 mm/s || At higher values the stepper motor can start skipping steps
|-
|Time to rewind from one end to the other<ref name="soft" /> || 12.4s || Moving at the maximum speed
|-
|Maximum acceleration / deceleration<ref name="soft" /> || 6.3 mm/s<sup>2 || Acceleration is limited to prevent damage to the rail bearings
|-
|Breaking distance<ref name="soft" /> || 2 mm || When travelling at the maximum speed
|-
|Time to speed up or break || 0.8s || Time to get to the maximum speed, and break when moving at the maximum speed
|-
|Positional accuracy || 2.5 &mu;m || When moving in the same direction (which minimizes backlash); not cumulative; one microstep
|-
|Backlash || ~50 &mu;m || Loss of accuracy when switching the direction of the motion; not cumulative
|-
|Minimum distance between frames<ref name="soft" /> || 5 &mu;m || Corresponds to two microsteps of the stepper motor
|-
|Maximum distance between frames<ref name="soft" /> || 2500 &mu;m || Can be set to higher in software if needed
|-
|Minimum framerate<ref name="soft" /> || 0.01 fps || Can be set to much lower in software if desired
|-
|Maximum framerate<ref name="soft" /> || 4 fps || Can be set to much higher in software if your camera and flash can handle it
|-
|Minimum number of shots<ref name="soft" /> || 2 || In 1-point stacking
|-
|Maximum number of shots<ref name="soft" /> || 600 || In 1-point stacking; in 2-points stacking the number can be any
|-
|Minimum input voltage || 9V || Depends on the mass of your camera/lens; at lower voltage the stepper motor will start skipping steps
|-
|Maximum input voltage || 12V || As recommended by Arduino. Higher voltage will also overheat the stepper motor driver
|-
|Maximum load || >1.0 kg || Maximum weight which can be moved by the rail without skipping the steps, with the rail in a horizontal orientation. My rail works fine with Canon 50D plus some extras attached (~1kg total). I wouldn't use the rail at large angle or vertically because the bearings inside the rail are mostly made of plastic and can be damaged under heavy load.
|-
|Weight, total || ~1.0 kg  || Including Velbon Mag Slider rail and 8 AA AmazonBasics Pro batteries
|-
|Weight, motor unit || || Velbon Mag Slider not included
|-
|Weight, controller unit || ||
|-
|Weight, battery unit || || Including 8 AA AmazonBasics Pro batteries
|}
<references>
<ref name="soft">Can be adjusted in the software</ref>
</references>


******************************************************** Introduction *********************************************************

<span class="plainlinks">[https://farm6.staticflickr.com/5653/22253919670_b1818a1c7c_o.jpg https://farm6.staticflickr.com/5653/22253919670_b4f8b8c985.jpg]</span>

This project was inspired by a few existing DIY focus stacking projects, in particular the one by Rylee Isitt (http://www.ryleeisitt.ca/articles/building-a-focus-stacking-controller/), though the only shared feature is the fact that it is based on Arduino microcontroller. The rest (hardware, software) was designed and written by me from scratch.

The main goal was to build an automated focus stacking macro-rail which would be
* Portable (small and light; battery operated),
* Fast (both in terms of the time to set it up, and in terms of shooting speed), and
* Cheap

The hope was to create a stacking rail which would be portable and fast enough to be usable in the field with live creatures (insects mostly).

To achieve a fast shooting speed, the software written utilizes the mode "shoot while moving the camera". This only works with a flash light, to freeze the motion blur caused by the continuously moving camera. (Flash light is usually required anyway for macro photography because of the small effective apertures used.) As a specific example, I can use 1/16 power of my radio-controlled Yongnuo YN560-III flash to produce well exposed photos with 5:1 equivalent magnification factor using 28mm f4 lens reversely mounted on three extension tubes (at ISO 200). At full power the Yongnuo's flash duration is ~2ms. At 1/16 power it is proportionally smaller, or ~100 &mu;s. Even when shooting at the fastest speed my rail can sustain (5 mm/s), the camera will travel 0.5 &mu;m during the flash, which is only 1% of the DoF (around 50 &mu;m). Obviously, such a tiny motion blur will be undetectable. Pushing camera shutter and external flash to its limits, one could potentially shoot 10-15 shots (while moving the camera) in a rapid sequence, in say 3-4 seconds. This might work with some live insects (who freeze when sensing a danger.)

A less important goal was to make this project cheap. As a result, practically all the parts were ordered from China (mostly from ebay). The total costs (including shipping) were ~150$, with 110$ spent for Velbon Mag Slider focusing rail, and ~40$ spent on all the rest - stepper motor, Arduino and motor drive boards, LCD module, keypad, enclosure etc.

To minimize the initialization time after powering the rail on, the interface is extremely simple: no menus to browse; each of the 16 keys is directly programmed to execute a single function. (I also keep adding some two-key combinations, for less frequently needed functions; 13 at this point. In total currently I have 28 functions.) After turning the power on, after a fraction of a second the unit is ready for shooting; pressing a single key instantly starts focus stacking shooting with the previously used parameters. There are two main modes of operation:

* '''One-point shooting ("field mode").''' Using the predefined parameters "Number of shots", "Frames per second" (determined by how fast your camera can take shots and your flash can recharge), and "&mu;m per frame" (determined by the DoF of the macro lens used), pressing one button (*) immediately starts focus stacking in the direction towards the camera; pressing "D" starts focus stacking in the opposite direction (towards the subject). This mode will likely be the most useful in the field with live creatures, as it has an essentially zero setup time. The three parameters can be changed (decreased / increased) using one of the 6 dedicated keys. The current values of the parameters are stored in the permanent memory (EEPROM), and will be remembered after the device is powered off and on again. In addition, these and a few other important parameters (like the two points coordinates for the two-point shooting - see below) can be easily stored in (and later retrieved from) one of the three custom registers, stored in EEPROM. This is very convenient for storing most frequently used parameter combinations.

* '''Two-point shooting ("studio mode").''' This regime provides more control, but takes more time to set up and hence is more suitable for still life / studio applications. One can use Fast forward (A) or Rewind (1) keys to precisely position the camera at one end of the stacking interval. If it is the foreground starting point, one then presses a button (4) to set the foreground point, then does rewind/fast forward and sets the background point (by pressing B). (The order can be reversed.) After that, the camera can be moved between back/foreground points by using a single key (C and 7). One can use "1"/"A" and "4"/"B" buttons again to finetune/reset one or both points. Once you are satisfied with the range for focus stacking, you can press "0" to start focus stacking shooting in a two-point mode; this forces the camera to move to the nearest of the two points, and then do focus stacking while traveling to the other point. Only two parameters are used here: "Frames per second" and "&mu;m per frame"; number of shots is determined self-consistently from these parameters and the distance between the two points. The current two points are written to permanent memory, so the device will remember them after powering off and on again. (And as mentioned above, all these parameters can be permanently stored in one of the three custom registers.)


************************************************** Hardware *********************************************************

= Overview =

The device consists of three separate blocks: 

# '''The controller unit''' (125x80x32 mm plastic enclosure), containing most of electronics: Arduino Uno R3, EasyDriver motor driver board, Nokia 5110 LCD display, 4x4 keypad, and a small breadboard with a few components (resistors, a diode, a relay, RJ-45 connector);
# '''The motor unit''': stepper motor attached to the Velbon Mag Slider macro rail with two steel brackets and a shaft-to-focusing-knob coupler, in an aluminum DIY enclosure, with a small breadboard (just for the connectors: RJ-45 and 2.5mm stereo-phone socket<ref name="phone" />, to connect to the camera.) The other addition is two limiting micro-switches glued to the plastic top of the macro rail - this is essential to prevent the rail hitting the two physical limits while in operation. (Once properly calibrated, the rail is programmed to never hit the switches. Re-calibration should be rarely required, and is easily accomplished by pressing a two-key command "#C".)
# '''The battery unit''': a flat plastic enclosure for 8 AA rechargeable batteries, with a switch and a plug matching the power socket on Arduino board. This can be attached to the bottom of the controller unit using Velcro pads. The whole module was purchased on ebay; no modifications were required.

I use a standard ethernet (Cat 5/6) patch cable to connect the controller unit to the motor unit (this is the only cable connecting the two modules). The cable has 8 wires, and handles everything: driving the stepper motor (4 wires), driving the camera shutter (2 wires), and reading the limiting switches on the rail (two wires). Either straight or crossover cables can be used (for that, I had to carefully plan which pins to use for which functions - I wanted a zero chance to burn my camera's circuits by using a wrong cable). One of the important advantages of Cat 5/6 patch cables compared to many other types of cables is the fact that Cat 5 connectors securely lock to sockets, so the chance of disconnecting during the rail operation is minimized. This is critical, as disconnecting the stepper motor cable during its operation will likely fry the motor driver circuits. The controller unit is programmed to detect if the cable is not attached to the motor module when it is powered on, and produce a corresponding warning.

Here is the list of the essential parts I used (USD; prices include shipping):

{| style="background:#fbfffa; text-align: left;" border="1"
|- style="background:#9aff88;border-bottom: 3px solid grey;" align="left" ;
! Part !! Price ($) !! Comments
|-
|[http://www.ebay.com/itm/New-Velbon-4-way-Magnesium-Super-Mag-Slider-Macro-Rail-2-Way-Focusing-Adjuster-/111303652407?ssPageName=ADME:L:OU:CA:1120 Velbon Super Mag Slider]        ||109.93|| Likely the cheapest decent quality manual focusing rail you can find. Has both a focusing knob (this is the one which will be driven by the stepper motor in this project) and a side motion knob (remains fully functional in this project). The rail remains fully functional for its original purpose (manual focusing) after the modifications; one has to simply unscrew the motor unit and remove the two micro-switches glued to the plastic cover of the rail.
|-
|[http://www.ebay.ca/itm/Ultrathin-2-Phase-4-Wire-42-Stepper-Motor-1-8-Degree-0-7A-e-/261826922341?pt=LH_DefaultDomain_0&hash=item3cf619c765 Stepper motor]            ||7.17  || Ultrathin 2-Phase 4-Wire 42 Stepper Motor 1.8 Degree 0.7A; diameter of the shaft is 4 mm
|-
|[http://www.ebay.ca/itm/Newest-ATmega328P-CH340G-USB-Driver-UNO-R3-Development-Board-for-Arduino-DIY-/251920112311?pt=LH_DefaultDomain_0&hash=item3aa79bdab7 Arduino Uno R3 (knockoff)]           ||4.39  ||
|-
|[http://www.ebay.ca/itm/291356564507 Nokia 5110 display]       ||2.50  || LCD display. Be careful - different models have different pin numbering, so only pay attention to the names of the pins, not their numbers!
|-
|[http://www.ebay.ca/itm/EasyDriver-Shield-stepping-Stepper-Motor-Driver-V44-A3967-For-Arduino-/281490124359?pt=LH_DefaultDomain_0&hash=item418a1e6e47 EasyDriver v4.4 (knockoff)]               ||1.15  || Stepper motor driver. Has a tiny pot which I set to the maximum motor current (0.7A), to maximize the torque. Some parts can get extremely hot (>100 C) which is normal.
|-
|[http://www.ebay.ca/itm/8-AA-2A-Cell-Battery-Size-Clip-Plastic-Storage-Box-Case-Holder-with-5-5mm-Black-/281638627936?pt=LH_DefaultDomain_0&hash=item4192f86a$ 8 batteries box]          ||2.49  || Very convenient 8-AA battery holder: flat, the size matches nicely that of the controller enclosure, has a power switch, the power plug matches exactly the power socket of the Arduino Uno board. I attach it to the bottom of the controller unit using a few Velcro pads.
|-
|[http://www.ebay.ca/itm/4x4-Matrix-high-quality-Keyboard-Keypad-Use-Key-PIC-AVR-Stamp-Sml-/141687830020?pt=LH_DefaultDomain_0&hash=item20fd40b604 4x4 keypad]    ||2.68  || These are real (comfortable) keys, not a cheap membrane keyboard.
|-
|[http://www.ebay.ca/itm/5V-Relay-SIP-1A05-Reed-Switch-Relay-for-PAN-CHANG-Relay-4PIN-/221584731824?pt=LH_DefaultDomain_0&hash=item33977aaeb0 Relay SIP-1A05]                    ||0.99  || To operate the camera shutter. In my design (works with my Canon 50D camera), I placed it inside my controller unit (with a diode and 33 Ohm resistor). If you have a camera which requires both shutter and autofocus wires to be grounded to make a shot, you should modify my deisgn: get two relays (use one diode and one 33 Ohm resistor for both) and put them inside the motor unit; operate both with a single Arduino pin.
|-
|[http://www.ebay.ca/itm/3Pcs-40pin-2-54mm-Single-Row-Straight-Female-Pin-Header-Strip-PBC-Arduino-TOP-/321470336172?pt=LH_DefaultDomain_0&hash=item4ad9200cac Female headers]           ||0.99  || To make female connectors for your controller unit, to connect different boards.
|-
|[http://www.ebay.com/itm/2pcs-2-5mm-Female-Audio-Connector-5-Pin-DIP-Headphone-Jack-Socket-PJ-202m-/121606507044?pt=LH_DefaultDomain_0&hash=item1c50500a24 Two headphone jacks 2.5 mm<ref name="phone" />] ||1.30  || See my warning<ref name="phone" />. I already ordered a replacement: 3.5mm true stereo socket + matching jack, and will upgrade my design once I get them
|-
|[http://www.ebay.ca/itm/331236618242?_trksid=p2057872.m2749.l2649&var=540417689785&ssPageName=STRK%3AMEBIDX%3AIT Motor coupler 4-7mm]      ||2.68  || This coupler likely will not work for you. You'll have to find a coupler with the 4mm hole on one side (for the motor shaft), and a hole matching the screw you attach to the focusing knob on the other side.
|-
|[http://www.ebay.ca/itm/NETWORK-Enthernet-RJ45-8-pin-CAT5-CAT5E-PCB-FEMALE-SHIELDING-SOCKET-JACK-US10-/331424637135?pt=LH_DefaultDomain_0&hash=item4d2a72a0cf Two RJ45 sockets]         ||1.98  || One goes inside the motor unit, the other one - inside the controller unit.
|-
|[http://www.ebay.com/itm/10Pcs-50pcs-Metric-Thread-M3-304-Stainless-Steel-Hex-Socket-Head-Screw-Bolt-Nut-/321762484601?ssPageName=ADME:L:OU:CA:1120 Ten M3x35 bolts] || 3.48 || The stepper motor's four M3 bolts are too short (if you use brackets 2mm thick or thicker to attach the motor to the rail); I used these longer ones instead (you only need two).
|-
|[http://www.ebay.ca/itm/M3-x-12mm-Slot-Flat-Countersunk-head-Stainless-Steel-Machine-Screws-50-pcs-/171864291058?hash=item2803e8f6f2 Fifty M3 x 12mm countersunk machine screws] || 3.00 || Great to attach boards to the plastic controller unit enclosure, and DIY aluminum motor unit enclosure, so that the bolt heads are not protruding.
|-
|[http://www.ebay.ca/itm/New-Plastic-Project-Box-Electronic-Case-DIY-125-80-32mm-/121251836099?pt=LH_DefaultDomain_0&hash=item1c3b2c30c3 Plastic enclosure, 135x80x32mm] || 3.81 || Probably the smallest enclosure you can find on ebay which would fit all the controller unit boards.
|}

I already had some other parts (resistors - 33, 330, 1k, 4 x 10k, 275k, 475k; capacitor - 0.1 uF; diode - 1N4004; nuts and bolts, wires, sheet metal for DIY brackets and metal enclosure, breadboards etc.). I couldn't find good micro-switches (small enough, but with fairly long levers) on ebay, but I managed to find good ones in a local surplus store, 1$ apiece.

The essential non-trivial tools you'll need:
* [http://www.canadiantire.ca/en/tools-hardware/power-tools-accessories/stationary-power-tools/drill-presses.html '''Drill press with a drill press vise.'''] I almost ruined my Velbon Mag Slider by trying to drill the holes for the motor brackets with a hand-held drill. The Velbon is made of a special kind of hardened magnesium alloy, with the nasty property that when one uses a hand drill to make a hole, the drill bit travels a lot sideways (can be 2-3 mm), which will make it impossible to attach motor brackets properly. I ended up buying a drill press because of this. (But I always wanted to have one.) With a drill press one can do a much better job - just make sure the head doesn't move much sideways (<0.5 mm), and make the exposed part of your drill bit fairly short (so it doesn't bend much).
* [http://www.canadiantire.ca/en/pdp/mastercraft-tap-and-die-set-76-pc-0587184p.html '''Taps and dies set.'''] You'll need these to cut a thread (M4 is about right) in the Velbon rail, for four bolts, to attach two motor brackets to the rail.
* [http://www.canadiantire.ca/en/tools-hardware/hand-tools/saws-cutting-tools/blades-accessories/stanley-coping-saw-0577424p.html?utm_campaign=bazaarvoice&utm_medium=SearchVoice&utm_source=AskAndAnswer&utm_content=Default '''Fret saw (or coping saw)''']: to make rectangular holes in the plastic (controller unit) and aluminum (motor unit) enclosures - for two RJ-45 sockets, USB socket, Nokia LCD display, and 16-keys keypad.

= Motor unit =

View from the top:

<span class="plainlinks">[https://farm1.staticflickr.com/624/22415906356_82f07b53d8_o.jpg https://farm1.staticflickr.com/624/22415906356_6bec5e1f26.jpg]</span>

View from the side (bottom part of the rail attached):

<span class="plainlinks">[https://farm6.staticflickr.com/5772/22428636112_42b0ec64de_o.jpg https://farm6.staticflickr.com/5772/22428636112_3809ef3343.jpg]</span>

<span class="plainlinks">[https://farm6.staticflickr.com/5619/21819185734_0a3c45f521_o.jpg https://farm6.staticflickr.com/5619/21819185734_437afa13b0.jpg]</span>

View from the bottom (bottom part of the rail detached):

<span class="plainlinks">[https://farm6.staticflickr.com/5766/22452813701_00c567aa76_o.jpg https://farm6.staticflickr.com/5766/22452813701_718a1b6664.jpg]</span>

The most critical step (don't do anything else until/unless you've succeeded with this one): proper coupling between the stepper motor and the focusing knob of the Velbon rail. Unfortunately the core of the focusing knob is made of (very hard) plastic, not metal:

<span class="plainlinks">[https://farm1.staticflickr.com/540/19024458298_3e012c1feb_o.jpg https://farm1.staticflickr.com/540/19024458298_c5459b24db.jpg]</span>

In addition, it has a hole in the middle (you'll see it once you remove the rubber covering of the knob), so one has to be very careful with creating the coupling to the motor:

<span class="plainlinks">[https://farm1.staticflickr.com/321/19025886439_d3afb33a72_o.jpg https://farm1.staticflickr.com/321/19025886439_bd4f33db1a_n.jpg]</span>

May be I was lucky, but I happened to have some old steel furniture screws laying around, with the threaded part which fitted perfectly the hole inside the focusing knob. I just had to carefully screw the bolt into the hole keeping it parallel to the knob axis, until the wider screw part touched the end of the knob:

<span class="plainlinks">[https://farm1.staticflickr.com/384/19215708001_3c61d6e39b_o.jpg https://farm1.staticflickr.com/384/19215708001_20f05116d3.jpg]</span>

I didn't use any glue. At the end, the screw was sitting almost perfectly parallel to the knob's axis, and very tight (I couldn't turn it with my hand):

<span class="plainlinks">[https://farm1.staticflickr.com/536/19024399990_676e11e426_o.jpg https://farm1.staticflickr.com/536/19024399990_ef614035c9.jpg]</span>

Another great feature of the screw was that the non-threaded part is a solid metal with exactly 7mm diameter. I managed to find on ebay a nice metal coupler from 7mm to 4mm (the shaft diameter of the stepper motor I used) which worked perfectly with the screw I had (I just had to cut off the head of the screw). I couldn't find identical furniture screws on ebay, but hopefully you can find something similar in a local store, or perhaps will come up with another idea on how to couple the plastic knob with the motor.

For the best possible coupling, I shaved a bit of metal off on one side of the screw, and on one side of the motor shaft. Warning: the motor shaft is made of extremely hard steel, so no regular file will work on it (perhaps a diamond file will do the job - if you have one). I ended up using a sharpening stone, and spent quite a bit of efforts shaving off a small amount of steel from one side of the shaft. At the end it was worth the efforts as the coupling was very secure (once you tightened the small bolts inside the coupler).

'''Warning:''' before doing anything to the focusing knob, you have to remove it from the Velbon rail - otherwise you will likely damage the mostly plastic bearings inside the rail. Once you attached the screw to the knob, cut off its head, and shaved off one side, you can put the knob back into the rail. Check the post #3 [http://www.photomacrography.net/forum/viewtopic.php?p=136591 here] for the instructions on how to remove the focusing knob from the rail.

The next critical step is to find (or make - as I did) two metal (best if steel or iron) brackets shaped like this : [ ] . They should be thick enough (probably at least 1.5 mm; I used 3mm iron) to provide a good support to the motor unit, and should be made with a high accuracy: the longer side should have the same length for the both brackets, and the shorter sides should be exactly parallel to each other, for each bracket. On one side the short ends will be attached to the Velbon rail (to the left and to the right from the focusing knob); you'll have to use a drill press to make four holes in the Velbon rail (very close to the edges of the rail - make sure the holes don't go inside the rail and potentially damage the rail's bearings), and then use taps and dies set to cut a thread inside the holes (I did M4 threading). The stepper motor will be attached to the opposite shorter sides of the brackets. (I used only two diagonally placed bolts in the motor to attach the motor to the two brackets; the remaining two bolts were left unattached).

'''Warning:''' if you use a fairly thick (2mm or more) metal for the two brackets, the length of the exposed part of the M3 bolts in the stepper motor will not be sufficient to attach the motor to the brackets. I ended up ordering some M3x35mm bolts on ebay and replacing two of the motor bolts with these, longer ones.

The length of the longer side of the brackets will be determined by the length of the exposed part of the focusing knob + the length of the exposed part of the screw you put inside the focusing knob + the length of the motor shaft. You don't have to be super-accurate here, as the coupler gives you a bit of a leeway in terms of the distance between the motor and the rail. Drilling the two holes for the motor in the short sides of the brackets should be the last operation here: you want to find such locations for the holes that the motor shaft is almost exactly on the same axis as the focusing knob, or else the motor will not have enough of torque to move the rail. I accomplished this step by securing the coupler to the motor shaft (tightening a bolt), inserting the screw put inside the focusing knob inside the coupler (don't secure it with a bolt), and then finding the positions for the two holes on the short sides of the brackets for the two motor bolts. 

This is how it looks like assembled:

<span class="plainlinks">[https://farm6.staticflickr.com/5749/21819177224_1e859a6ed4_o.jpg https://farm6.staticflickr.com/5749/21819177224_c0929bdfeb.jpg]</span>

The remaining steps are much less critical. One can put a metal (better aluminum) enclosure around the brackets, which has multiple purposes:
* It simplifies attaching the small bread board with two connectors (RJ-45 and 2.5 mm phone) to the motor unit.
* It makes the motor attachment to the rail more tight and secure.
* It hides all the wiring inside.
* It prevents you from turning the focusing knob by hand - this is bad because it breaks the rail calibration, and it can also burn your motor driver (by induced voltage) if the controller is attached to the motor unit.
* It looks nicer and more professional.

'''Warning:''' when designing the brackets and the enclosure, make sure that the bottom part of the assembly doesn't protrude below the bottom of the rail (specifically the top part of the rail, with the focusing knob), otherwise you won't be able to use the detachable bottom part of the rail, with the manual knob to move your camera sideways:

<span class="plainlinks">[https://farm1.staticflickr.com/573/22253937830_44472c103f_o.jpg https://farm1.staticflickr.com/573/22253937830_101fbc541b.jpg]</span>

This is not absolutely essential, but it would be a pity if the bottom part of the rail was wasted, and the sideway motion knob does simplify the job of macro-photography.

Then you should make a small breadboard and solder there the two external connectors (RJ-45 and 2.5 mm phone<ref name="phone" />) and ideally a couple of internal connectors (for the motor and the limiting micro-switches; this will make it easier to disassemble the motor unit):

<span class="plainlinks">[https://farm1.staticflickr.com/741/22199807430_bbcf703d18_o.jpg https://farm1.staticflickr.com/741/22199807430_05cb9bb27a.jpg]</span><span class="plainlinks">[https://farm1.staticflickr.com/566/22199805000_494b6d1372_o.jpg https://farm1.staticflickr.com/566/22199805000_7a05b37e71.jpg]</span>

<span class="plainlinks">[https://farm1.staticflickr.com/671/22452812631_da3e737c87_o.jpg https://farm1.staticflickr.com/671/22452812631_d5fdb71f15.jpg]</span>

<span class="plainlinks">[https://farm1.staticflickr.com/694/22255087809_78298e8d08_o.jpg https://farm1.staticflickr.com/694/22255087809_8ecd458d93.jpg]</span>

Finally, you need to attach the two limiting micro-switches to the rail, in a way that one of them would be triggered before the rail hits one of the physical limits. When a switch is triggered, there still should be enough of travel distance - around 3mm - left for the rail to properly decelerate and stop. The only way I could attach my micro-switches to the rail was by gluing them with a super-glue to the plastic cover of the rail, at a slight angle (to ensure there is the required 3mm gap when the switch is triggered). This worked pretty well:

<span class="plainlinks">[https://farm1.staticflickr.com/706/21820750243_1dacbcea73_o.jpg https://farm1.staticflickr.com/706/21820750243_d77af9eae3.jpg]</span>

Then you have to solder the switches sequentially, in a way that normally (when switches are not engaged) the two wires going to the controller unit would be shorted, and only if one of the switches is triggered the connection would be broken. This is used by Arduino to calibrate the rail (to make sure that the rail will never trigger the switches during its normal operation.) With time the calibration will be lost, so a re-calibration would be required once in a while. Calibration is triggered automatically if during its normal work the moving rail will trigger one of the switches, or one can request a re-calibration manually.

== Wiring ==

RJ-45 socket (view from the bottom of the breadboard):

https://c2.staticflickr.com/6/5690/22314781196_4be86083ca_o_d.png

This is the wiring I did for the RJ-45 socket I got on ebay. The one you have might have a different layout.

In a straight Ethernet patch cable, each wire will go to the corresponding pin of the second RJ-45 socket. A cross-over patch cable will have the following two pairs of wires swapped:
 1 <-> 3
 2 <-> 6

I created my RJ-45 pin assignment in the way that either straight of cross-over cables should work:

* 1,3* (white-orange - white-green): camera shutter
* 2,6* (orange - green): microswitch
* 4,5  (blues) : motor A
* 7,8  {browns): motor B

(*): order swapped in a cross-over cable (instead of 1,3 you get 3,1 etc.)


= Controller unit =

<span class="plainlinks">[https://farm1.staticflickr.com/713/21820758783_77c86cd69d_o.jpg https://farm1.staticflickr.com/713/21820758783_77c80d3e58.jpg]</span>

<span class="plainlinks">[https://farm6.staticflickr.com/5741/22415911926_1b76ea8374_o.jpg https://farm6.staticflickr.com/5741/22415911926_bff7952648.jpg]</span>

<span class="plainlinks">[https://farm1.staticflickr.com/640/21819190094_ffbef8ac81_o.jpg https://farm1.staticflickr.com/640/21819190094_af419cdb30.jpg]</span>

I managed to fit all other components (except for the batteries module) inside a small (125x80x32 mm) plastic enclosure from ebay:

<span class="plainlinks">[https://farm1.staticflickr.com/749/22253928730_a6f90607b5_o.jpg https://farm1.staticflickr.com/749/22253928730_e8ca2e52a2.jpg]</span>

Bottom part, cables attached:

<span class="plainlinks">[https://farm6.staticflickr.com/5823/22452804821_0fbab9b9aa_o.jpg https://farm6.staticflickr.com/5823/22452804821_1fba2e0974.jpg]</span>

Removable cables detached:

<span class="plainlinks">[https://farm6.staticflickr.com/5670/22415886926_5cabf5a55d_o.jpg https://farm6.staticflickr.com/5670/22415886926_3036e82e23.jpg]</span>

Only one cable (Cat 5/6) is connecting the controller unit to the motor unit, and one cable is connecting it to the power source (the battery module, or 10-12 V AC power adapter.) There are three boards inside, all attached to the bottom of the enclosure via ~5 mm long plastic spacers:

* '''Arduino Uno R3''' knockoff board. The size of the enclosure is perfect in the sense that the Arduino board fits it nicely in the landscape orientation, with the USB and power sockets accessible from the outside (once you cut the corresponding holes in the side of the enclosure - use fret/coping saw for the rectangular hole).
* '''EasyDriver v4.4''' knockoff board (motor driver). This board is extremely small, and a bit of a challenge to attach to the enclosure: I ended up shaving the sides of two M3 nuts to prevent them from shorting circuits on the board. There is a tiny pot on board (motor current regulator). I set it to the largest motor current (0.7A), to maximize the motor's torque. See Question 5 at the bottom of this page: http://www.schmalzhaus.com/EasyDriver/ .
* '''Breadboard''' with some other components soldered in: RJ-45 socket, a few voltage limiting resistors to connect the 5 V Arduino to the 3.3 V Nokia LCD display, a female header for the 6-wire cable to go to the LCD display, and relay + 33 Ohm resistor + 1N4004 diode - for camera shutter triggering. This board is attached at the top of the enclosure.

Bottom view on the three boards:

<span class="plainlinks">[https://farm1.staticflickr.com/599/22199806860_9d84bdf07c_o.jpg https://farm1.staticflickr.com/599/22199806860_c54411bf36.jpg]</span>

Two more components are attached to the top part of the enclosure (you'll have to make corresponding rectangular holes for them, with fret/coping saw):

* Nokia 5110 LCD module.
* 4x4 keys keypad.

<span class="plainlinks">[https://farm1.staticflickr.com/702/22441885575_f7a7f0c9e6_o.jpg https://farm1.staticflickr.com/702/22441885575_d3d03fa4b0.jpg]</span>

The most time consuming part here is soldering all the required connections between these five components.

The power for the motor driver is taken directly from the Arduino's power plug. You'll have to solder the two wires, for - and +, directly to the Arduino plug, on the bottom of the board.

You have to check and recheck multiple times all the connections before attempting to power it on for the first time. It is especially critical for the camera shutter connectors: '''make it absolutely sure you are not sending high voltage inside your DSLR by mistake'''. Test this with any new Cat5/6 cable you plan to use with the rail, as some of them can have different wiring (crossover / straight). I used the RJ-45 pins in the way that both crossover and straight Cat5/6 cables will work properly.

'''Warning:''' never let anyone to attach your rail to a networking device (computer, laptop, router) via Cat5/6 cable! I use RJ-45 sockets and Cat5/6 cables here for convenience; they have nothing to do with Ethernet. If somebody does attach the rail to another device, this will most likely burn the networking board on that device, and might also burn the motor driver in the controller unit. It wouldn't hurt to put a red label on your controller unit next to the RJ-45 socket with such a warning.


== Wiring ==

=== Keypad to Arduino ===

{| style="background:#fbfffa; text-align: left;" border="1"
|- style="background:#9aff88;border-bottom: 3px solid grey;" align="left" ;
! Keypad pin !! Arduino pin
|-
|1       ||       A2
|-
|2       ||       A3
|-
|3       ||       A4
|-
|4       ||       A5
|-
|5       ||        4
|-
|6       ||       10
|-
|7       ||       12
|-
|8       ||       A1
|}

&nbsp;

=== Nokia 5110 LCD to Arduino ===

Different Nokia 5110 boards have different pin numbering, so be careful!

{| style="background:#fbfffa; text-align: left;" border="1"
|- style="background:#9aff88;border-bottom: 3px solid grey;" align="left" ;
! LCD pin !! Arduino pin
|-
|VCC     ||     3.3V
|-
|GND     ||     GND
|}

&nbsp;

=== Nokia 5110 LCD to breadboard ===

Different Nokia 5110 boards have different pin numbering, so be careful!

{| style="background:#fbfffa; text-align: left;" border="1"
|- style="background:#9aff88;border-bottom: 3px solid grey;" align="left" ;
! LCD pin !! Breadboard pin !!  Via resistor  !! to Arduino pin
|-
|SCE     ||      1      ||        1k    ||      7
|-
|RST     ||      2      ||       10k    ||      6
|-
|DC      ||      3      ||       10k    ||      5
|-
|DN      ||      4      ||       10k    ||     11
|-
|SCL     ||      5      ||       10k    ||     13
|-
|LED     ||      6      ||       330    ||      9
|}

Reference: https://learn.sparkfun.com/tutorials/graphic-lcd-hookup-guide

=== EasyDriver v4.4 motor driver to Arduino ===

{| style="background:#fbfffa; text-align: left;" border="1"
|- style="background:#9aff88;border-bottom: 3px solid grey;" align="left" ;
! Driver pin !! Arduino pin
|-
|M+       ||    Power Plug +
|-
|GND      ||    Power plug GND
|-
|STEP     ||         0
|-
|DIR      ||         1
|-
|ENABLE   ||         2
|}

&nbsp;

=== Motor driver to breadboard (to RJ-45) ===

{| style="background:#fbfffa; text-align: left;" border="1"
|- style="background:#9aff88;border-bottom: 3px solid grey;" align="left" ;
! Driver pin !! RJ-45 pin
|-
|A1       ||       4
|-
|A2       ||       5
|-
|B1       ||       7
|-
|B2       ||       8
|}

&nbsp;

=== Relay SIP-1A05 ===

https://c2.staticflickr.com/6/5660/22351066681_9ab3378e7a_o_d.png

Diode: 1N4004

Reference: http://www.forward.com.au/pfod/HomeAutomation/OnOffAddRelay/index.html#DDreeds



=== Limiters: RJ-45 (breadboard) to Arduino ===

{| style="background:#fbfffa; text-align: left;" border="1"
|- style="background:#9aff88;border-bottom: 3px solid grey;" align="left" ;
! RJ- pin !! Arduino pin
|-
|2     ||      [GND from breadboard]
|-
|6     ||              8
|-
|}

&nbsp;

=== Battery sensor (directly soldered to the bottom and top of the Arduino board) ===

https://c1.staticflickr.com/1/687/22152355160_999f9b30d2_o_d.png

 R1 + R2 ~ 500 kOhm;  (R1+R2)/R2 ~ 2.4

Reference: http://electronics.stackexchange.com/questions/154371/lower-voltage-with-a-zener-diode

= Battery unit =

<span class="plainlinks">[https://farm6.staticflickr.com/5645/21819188204_f71e08cedb_o.jpg https://farm6.staticflickr.com/5645/21819188204_f15cb4d645.jpg]</span>

Nothing to do here - just buy and use one of those 8-AA battery flat enclosures with a switch and a cable with a plug. Double check that the polarity of the plug matches that of the Arduino power socket.


<references>
<ref name="phone">See [[Warnings | my warning about the 2.5mm stereo phone socket]]</ref>
</references>


********************************************************** Software *************************************************************

= The source code =

At some point I will move the source code for this project to a proper place (like github). For now you can download the most recent stable version as a zip file here:

http://syam.no-ip.org/stacker_v0.08.zip

Use the official Arduino IDE to compile the code and upload it to your Arduino:

https://www.arduino.cc/en/Main/Software

The cheap knockoff Arduino Uno R3 board I am using requires special USB serial driver (for Chinese CH341 chipset). The following one (file CH341SER.EXE) worked for my board:

http://www.wch.cn/download/CH341SER_EXE.html

Install it before trying to connect your Arduino board to the PC.

In my code I am using the two following publicly available libraries for Arduino:

* pcd8544 library (for Nokia 5110): https://github.com/snigelen/pcd8544
* Keypad library: http://playground.arduino.cc/Code/Keypad

Install them before trying to compile my code. See here: https://www.arduino.cc/en/Guide/Libraries


= Customizing my code =

There are some macro parameters in stacker.h file which you might have to modify:

{| style="background:#fbfffa; text-align: left;" border="1"
|- style="background:#9aff88;border-bottom: 3px solid grey;" align="left" ;
! Macro parameter !! Default value !! Description
|-
| DEBUG || Undefined || Enable debugging with serial monitor
|-
| MOTOR_DEBUG || Undefined || When defined, limiting switches are disabled. Convenient to use when you are testing the coupling between the motor and the rail (if there is enough torque; if the motor axis is co-aligned with the focusing knob)
|-
| BATTERY_DEBUG || Undefined || When defined, prints actual voltage (not just #, ## symbols) in the bottom right corner of the display, per single AA battery, without period (so 1.25V will be shown as 125). Convenient for detecting what is the lowest voltage your rail can use without skipping steps - depends on the weight of your camera + lens, among other things.
|-
| V_LOW || 1.1 || Critically low voltage, per AA battery (when V becomes lower than this, the macro rail is disabled, to preserve the rail's calibration; not implemented yet). 
|-
| VOLTAGE_SCALER || 2.7273 * 5.0/1024.0/8.0 || The first number should be computed for the particular values of the two voltage dividing resistors (R1 and R2) you used to connect to Arduino's pin PIN_BATTERY (A0). The first number is computed as (R1+R2)/R2. R1+R2 should be ~0.5 MOhm.
|-
| LCD || Defined || When undefined, all LCD functions are skipped. Use it if you want to test the board but don't have yet the LCD.
|-
| STACKING_DELAY || 200000 || An additional delay (in &mu;s) in the stacking shot sequence, after making the first shot. This delay is needed because my rail only triggers the shutter pin on the camera. My Canon 50D will always skip the first shot if this parameter is less than 200000 (0.2s). Increase the parameter if your camera skips the first shot; otherwise try to make it as small as possible.
|}

***************************************************** Warnings **************************************************************

== Warning #1 ==
My solution for connecting my DSLR to the rail using a Yongnuo camera shutter cord (which has a 2.5 mm stereo phone plug on the other end) + a 2.5mm phone socket inside the motor unit is not a perfect one. First, I didn't realize that the socket I ordered is not a stereo one, despite having three connectors. (It proved to be a mono socket with a switch.) In the Yongnuo cable, the 2.5mm stereo phone plug has the shutter connector at the tip, and the autofocusing connector in the middle (the base is the ground). When I inserted the plug inside my mono socket, only the shutter and ground connectors worked properly; the AF connector ended up permanently shorted to the ground. My controller unit only uses the shutter wire, so the rail still worked fine. But the AF contact shorted to the ground resulted in all camera buttons disabled. (So e.g. I couldn't turn the LiveView on or off.) I did a workaround: I shaved off insulation on one side of the Yongnuo cable until I had an access to the three wires inside, and then cut the AF wire (colored white; the other two wires are: pink: shutter wire, yellow: ground). A better solution would be to buy 3.5mm stereo plug and matching socket, use the 3.5mm socket inside the motor unit, and replace the Yongnuo's 2.5mm plug with the 3.5mm one. One could also try to find a true stereo 2.5mm socket, but the only ones I could find on ebay didn't have the screw - they would only be supported by the contacts soldering to the breadboard, which could make it rather unreliable. The one I am using is securely screwed to the metal enclosure (plus it is soldered to the board), so should be very durable.

== Warning #2 ==

Using only the shutter wire works perfectly fine for focus stacking with my camera (Canon 50D), but this might not be the case with other models, and especially other makes. You have to make your own research on this. ([http://www.doc-diy.net/photo/remote_pinout/ This link] would be a great starting point.) I believe some camera makes would require that both AF and shutter wires to be shorted to the ground to make a shot. If that is the case, you'd have to modify a bit my design. I can suggest placing two relays (one for the shutter, the other one for AF) inside the motor unit, and using one Arduino pin to operate both. (In my design, I use one relay, and it is inside the controller unit.) Yongnuo makes a few different shutter cables for different cameras (I think only for Canon and Nikon), so my rail is fairly universal in that regard. (You just need to have a separate shutter cable for each different camera you have.) For non Canikon camera makes, you'll have to improvise. (See [http://www.doc-diy.net/photo/remote_pinout this link].)

== Warning #3 ==

My decision to put the relay triggering the camera shutter inside the controller unit is probably not the best one. With a hindsight, I should have placed it on the breadboard inside the motor unit. The two important reasons: (1) This way you'd reduce the chance of accidentally frying your camera by high-voltage from the motor driver (if e.g. you used a wrong kind of cable between the controller and motor units; or if you incorrectly soldered wires to RJ-45 sockets) to essentially zero. (2) This would be essential for some non-Canon camera makes which require both autofocus and shutter wires to be grounded, to make a shot (see above). If the relay is inside the motor unit, one could simply add a second parallel relay, and let the two different relays ground the AF and shutter wires. I might try to do this change to my rail.


*********************************************************************** User guide *******************************************************************************

= Quick start guide =
# Test how fast your camera can shoot with the rail (my Canon 50D can do up to 4 fps continuously with a fast memory card), and how fast your flash can recycle at the power level required (less power means shorter recycle time). Usually flashes can do a short sequence very rapidly (a few fps) - useful for one-point stacking with live creatures, but have to be set to lower fps for longer sequences (studio work; usually done with two-point stacking). Specific examples: my flash Yongnuo 560-III + external battery, at 1/16 power, can do at least 30 shots at 4 fps, up to 125 shots at 1 fps, and at least 150 shots when using 0.5 fps. Set the FPS rail parameter (keys "8"/"9") accordingly: the largest allowed value (say, 4 fps) for outdoor one-point shooting, and something like 1 fps or even 0.5 fps for studio work (when a large number of shots will be made).
# Determine the depth of field for your macro lens (will depend mostly on magnification and f-number). This can be done experimentally (shoot a few short focus stacking sequences with varying mm/frame parameter), or estimated theoretically (see e.g. [https://en.wikipedia.org/wiki/Depth_of_field#Close-up_2 here]). Example: my best super-macro lens (produces 5:1 equivalent magnification when used in a reversed position on top of three extension tubes), Schneider 28 mm f/4 Componon enlarger lens, has DoF around 50 &mu;m when used wide open (where it is sharpest). Set the &mu;m/frame rail parameter (key "5"/"6") to be equal or a bit less than the DoF of your lens. This will ensure no sharpness gaps in the stacked photo.
# '''"Outdoor"''' (single-point stacking) setting. Choose the number of shots to take (N_frames; keys "2"/"3"). Set the tripod with rail and camera attached near the subject. Use tripod knobs for crude positioning, then sideways knob on the Velbon rail and the "1"/"A" buttons on the controller unit to correctly frame the subject and bring it into focus. Use "1"/"A" buttons to bring the focus to the foreground part of the subject, hold your flash with a small softbox close to the subject, and then press "D" on the controller. Alternatively, use "1"/"A" keys to bring focus to the background of the subject, and then press "*". You can interrupt the stacking at any time by pressing any key on the controller unit.
# '''"Studio"''' (two-point stacking) setting. Position the camera and the flash, use "1"/"A" keys to bring focus to the foreground of the subject, press "4" to set the foreground point, then use "1"/A keys to find the background position, press "B" to memorize it. To double check, you can press "7" and "C" to move back and forth between the two points. Use "1"/"A" and "4"/"B" again if you need to fine-tune/reset any of the points. Once satisfied, press "0" to start two-point focus stacking (you don't have to be at one of the two points). As with 1-point stacking, you can interrupt the stacking at any time by pressing any key on the controller unit.

= Display =

The 6-line, 14 characters per line LCD display (Nokia 5110) has the following layout:

<span class="plainlinks">[https://farm6.staticflickr.com/5802/21717642764_0e1a0e1333_o.png https://farm6.staticflickr.com/5802/21717642764_2acc248910.jpg]</span>

<span class="plainlinks">[https://farm1.staticflickr.com/678/21819165744_bfa27ab3fb_o.jpg https://farm1.staticflickr.com/678/21819165744_e66e1ffc67.jpg]</span>


== Line 1: single-point shooting parameters ==
* Input parameter N_frames (can be modified via keys "2" / "3").
* Total stacking depth in mm.
* Stacking time in seconds.

== Line 2: two-point shooting parameters ==
* Number of shots to take (derived self-consistently from the distance between the background and foreground stacking points and the parameter &mu;m/frame).
* Total stacking depth in mm (distance between the background and foreground stacking points).
* Stacking time in seconds.

== Line 3: stacking parameters ==
* Parameter &mu;m/frame (use keys "5"/"6" to change it).
* Parameter frames/second (FPS; use keys "8"/"9" to change it).

== Line 4: two stacking points ==
* FXXX: coordinate of the foreground stacking point in mm. (Zero is at the foreground limiting switch.) Can be set or reset to the current position by using key "4".
* BXXX: coordinate of the background stacking point in mm. (Zero is at the foreground limiting switch.) Can be set or reset to the current position by using key "B".

== Line 5: current coordinate ==
* Normally displays the current position in mm (distance from the foreground limiting switch). Sometimes shows other information.

== Line 6: status line ==
* '''Status letter:''' "B" when breaking, "C" when doing calibration.
* '''Motion status:'''
** <- : rewinding to the foreground limiter;
** -> : fast-forwarding to the background limiter;
** < : doing stacking towards the foreground limiter;
** > : doing stacking towards the background limiter.
* '''Current frame:''' live frame counter during focus stacking.
* '''2-points status:''' two characters, left one for the foreground point (can be empty if it is not set yet, "f" if it is set, and "F" if it is set and we are currently at that point) and the right one for the background point (empty /  "b" / "B").
* '''Battery status:''' 
** When compiled with BATTERY_DEBUG macro parameter, shows the voltage per AA battery, multipled by 100. (So 1.25V will show as 125.)
** When compiled without BATTERY_DEBUG macro parameter, shows "##" for battery charge 50% ... 100%, "#." for battery charge 0% ... 50%, and ".." for critically low charge.


= Keys =

I keep improving and debugging my program. Currently, it has 15 different functions directly associated with each key on the 4x4 keypad, plus 13 more two-key combinations (always starting with the key "#"). Here is the list of the single-key and two-key functions (they often come in pairs):


== Group A: Focus stacking keys ==

{| style="background:#fbfffa; text-align: left;" border="1"
|- style="background:#9aff88;border-bottom: 3px solid grey;" align="left" ;
! Keys !! Function
|-
|1, A|| Rewind and Fast-forward. The action continues as long as you press the button. These motions (as all the motions in this rail) are done with a limit on acceleration/deceleration (to prevent damage to the rail bearings and the motor), and with a limit on the maximum speed (5 mm/s; at larger speeds the stepper motor looses too much torque and starts skipping steps).
|-
|4, B|| Set fore- and background points.
|-
|7, C|| Go to to the fore/background points.
|-
|*, D|| Initiate one-point focus stacking in the fore/background directions
|-
|0   || Initiate two-point focus stacking. If the current position is not at one of the two stacking points, the rail first travels to the nearest point, and then initiates focus stacking while travelling to the other point.
|}

== Group B: Change parameters ==
One click moves to the next value in a 25-values table. Pressing and holding a key will result in a fast skipping through the table.

{| style="background:#fbfffa; text-align: left;" border="1"
|- style="background:#9aff88;border-bottom: 3px solid grey;" align="left" ;
! Keys !! Function
|-
|2, 3|| Decrease / increase the parameter N_shots (only used in one-point stacking). Determines home many shots to take after pressing "*" or "D".
|-
|5, 6|| Decrease / increase the parameter &mu;m/frame. Determines the linear distance between shots during focus stacking. Should be comparable to the depth of field of the macro lens.
|-
|8, 9|| Decrease / increase the parameter FPS (frames per second). Normally the larger the better (faster focus stacking), but is limited by both the camera shutter and the flash recycle time (using flash at lower power will reduce the recycle time).
|}

== Group C: Using three memory registers ==
To permanently store most frequently used parameter combinations (parameters N_frames, &mu;m/frame, FPS, and the coordinates of the two points for two-point stacking). Stored in EEPROM (non-volatile memory.)

{| style="background:#fbfffa; text-align: left;" border="1"
|- style="background:#9aff88;border-bottom: 3px solid grey;" align="left" ;
! Keys !! Function
|-
|#2, #3|| Save to / read from register 1
|-
|#5, #6|| Save to / read from register 2
|-
|#8, #9|| Save to / read from register 3
|}

== Group D: Miscellaneous ==

{| style="background:#fbfffa; text-align: left;" border="1"
|- style="background:#9aff88;border-bottom: 3px solid grey;" align="left" ;
! Keys !! Function
|-
|#1, #A|| Step back / forward one frame (no shooting)
|-
|#4|| Cycle through three levels of backlighting (none -> 1/2 -> full -> none -> ...)
|-
|#7|| Trigger camera shutter once
|-
|#*|| Factory reset. Sets all parameters to the initial values, then initiates rail calibration
|-
|#B|| Emergency breaking. Used for rare occasions when you loose control of the rail (due to a program bug)
|-
|#C|| Initiates rail calibration
|}

== Key maps ==

You can print and carry with you these key maps:

=== Single-key functions ===

<span class="plainlinks">[https://farm1.staticflickr.com/603/21853903588_1846d44274_o.png https://farm1.staticflickr.com/603/21853903588_6ec78186be.jpg]</span>


=== Two-key (# + key) functions ===

<span class="plainlinks">[https://farm1.staticflickr.com/779/21853601940_ecfcf32483_o.png https://farm1.staticflickr.com/779/21853601940_6b98deac91.jpg]</span>

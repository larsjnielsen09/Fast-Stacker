Stacker: Arduino-based robotic macro rail, for focus stacking macro photography.

 = Introduction =

This project was inspired by a few existing DIY focus stacking projects, in particular the one by Rylee Isitt (http://www.ryleeisitt.ca/articles/building-a-focus-stacking-controller/), though the only shared feature is the fact that it is based on Arduino microcontroller. The rest (hardware, software) was designed and written by me from scratch.

The main goal was to build an automated focus stacking macro-rail which would be
 - Portable (small and light; battery operated),
 - Fast (both in terms of the time to set it up, and in terms of shooting speed), and
 - Cheap

The hope was to create a stacking rail which would be portable and fast enough to be useable in the field with live creatures (insects mostly).

To achieve a fast shooting speed, the software written utilizes the mode "shoot while moving the camera". This only works with a flash light, to freeze the motion blur caused by the continuously moving camera. (Flash light is usually required anyway for macro photography because of the small effective apertures used.) As a specific example, I can use 1/16 power of my radio-controlled Yongnuo YN-560II flash to produce well exposed photos with 5:1 equivalent magnification factor using 28mm f4 lens reversely mounted on three extension tubes (at ISO 200). At full power the Yongnuo's flash duration is ~2ms. At 1/16 power it is proportionally smaller, or ~100us. Even when shooting at the fastest speed my rail can sustain (5mm/s), the camera will travel 0.5um during the flash, which is only 1% of the DoF (around 50 um). Obviously, such a tiny motion blur will be undetectable. Pushing camera shutter and external flash to its limits, one could potentially shoot 10-15 shots (while moving the camera) in a rapid sequence, in say 3-4 seconds. This might work with some live insects (who freeze when sensing a danger.)

A less important goal was to make this project cheap. As a result, practically all the parts were ordered from China (mostly from ebay). The total costs (including shipping) were ~150$, with 110$ spent for Velbon Mag Slider focusing rail, and ~40$ spent on all the rest - stepper motor, Arduino and motor drive boards, LCD module, keypad, enclosure etc.

To minimize the initialization time after powering on the rail, the interface is extremely simple: no menus to browse; each of the 16 keys is directly programmed to execute a single function. (I also keep adding some two-key combinations, for less frequently needed functions; around 13 at this point.) After turning the power on, after a fraction of a second the unit is ready for shooting; pressing a single key instantly starts focus stacking shooting with the previously used parameters. There are two main modes of operation:

 - One-point shooting ("field mode"). Using the predefined parameters "Number of shots", "Frames per second" (determined by how fast your camera can take shots and your flash can recharge), and "mm per frame" (determined by the DoF of the macro lens used), pressing one button (*) immediately starts focus stacking in the direction towards the camera; pressing "D" starts focus stacking in the opposite direction (towards the subject). This mode will likely be the most useful in the field with live creatures, as it has an essentially zero start-up time. The three parameters can be changed (decreased / increased) using one of the 6 dedicated keys. The current values of the parameters are stored in the permanent memory (EEPROM), and will be remembered after the device is powered off and on again. In addition, these and a few other important parameters (like the two points coordinates for the two-point shooting - see below) can be easily stored in (and later retrieved from) one of the three custom registers. This is very convenient for storing most frequently used parameter combinations.

 - Two-point shooting ("studio mode"). This regime provides more control, but takes more time to set up and hence is more suitable for still life / studio applications. One can use Fast forward (A) or Rewind (1) keys to precisely position the camera at one end of the stacking interval. Say if it is the foreground starting point, one then presses a button (4) to set the foreground point, then does rewind/fast forward and sets the background point (by pressing B). (The order can be opposite.) After that, the camera can be moved between back/foreground points by using a single key (C and 7). One can always use "A" and "1" buttons again to reset one or both points. Once you are satisfied with the range for focus stacking, you can press "0" to start focus stacking shooting in a two-point mode; this forces the camera to move to the nearest of the two points, and then do focus stacking while traveling to the other point. Only two parameters are used here: "Frames per second" and "mm per frame"; number of shots is determined self-consistently from these parameters and the distance between the two points. The current two points are written to permanent memory, so the device will remember them after powering off and on again. (And as mentioned above, all these parameters can be permanently stored in one of the three custom registers.)

 = Hardware = 

The device consists of three separate blocks: 

 1) the controller unit (125x80x32mm plastic enclosure), containing most of electronics: Arduino Uno R3, EasyDriver motor driver board, Nokia 5110 LCD display, 4x4 keypad, and a small breadboard with a few components (resistors, a diode, a relay, RJ-45 connector);

 2) the motor unit: stepper motor attached to Velbon Mag Slider macro rail with two brackets and shaft-to-focusing-knob coupler, in a metal enclosure, with a small breadboard (just for the connectors: RJ-45 and 2.5mm stereo-phone socket, to connect to the camera.) The other addition is two limiting micro-switches glued to the top of the macro rail - this is essential to prevent the rail hitting the two physical limits while in operation. (Once properly calibrated, the rail is programmed to never hit the switches. Re-calibration should be rarely required, and is easily accomplished by pressing a two-key command "#C".)

 3) the battery module: a flat plastic enclosure for 8 AA rechargeable batteries, with a switch and a plug matching the power socket on Arduino board. This can be attached to the bottom of the controller unit using Velcro pads. The whole module was purchased on ebay; no modifications were required.

I use a standard ethernet (Cat 5/6) patch cable to connect the controller unit to the motor unit (this is the only cable connecting the two modules). The cable has 8 wires, and handles everything: driving the stepper motor (4 wires), driving the camera shutter (2 wires), and reading the limiting switches on the rail (two wires). Either straight or crossover cables can be used (for that, I had to carefully plan which pins to use for which functions - I wanted a zero chance to burn my camera's circuits by using a wrong cable). One of the important advantages of Cat 5 patch cables compared to many other types of cables is the fact that Cat 5 connectors securely lock to sockets, so the chance of disconneting during the rail operation is minimized. This is critical, as disconneting the stepper motor cable during its operation  will likely fry the motor driver circuits. The controller unit is programmed to detect if the cable is not attached to the motor module when it is power on, and produce a corresponding warning.

Here is the list of essential parts I used:

109.93  Velbon Mag Slider  http://www.ebay.com/itm/New-Velbon-4-way-Magnesium-Super-Mag-Slider-Macro-Rail-2-Way-Focusing-Adjuster-/111303652407?ssPageName=ADME:L:OU:CA:1120
7.17  stepper motor  http://www.ebay.ca/itm/Ultrathin-2-Phase-4-Wire-42-Stepper-Motor-1-8-Degree-0-7A-e-/261826922341?pt=LH_DefaultDomain_0&hash=item3cf619c765
4.39  Arduino Uno R3  http://www.ebay.ca/itm/Newest-ATmega328P-CH340G-USB-Driver-UNO-R3-Development-Board-for-Arduino-DIY-/251920112311?pt=LH_DefaultDomain_0&hash=item3aa79bdab7
2.50  Nokia 5110 display http://www.ebay.ca/itm/291356564507
1.43  Easydriver  http://www.ebay.ca/itm/EasyDriver-Shield-stepping-Stepper-Motor-Driver-V44-A3967-For-Arduino-/281490124359?pt=LH_DefaultDomain_0&hash=item418a1e6e47
2.49  8 batteries box  http://www.ebay.ca/itm/8-AA-2A-Cell-Battery-Size-Clip-Plastic-Storage-Box-Case-Holder-with-5-5mm-Black-/281638627936?pt=LH_DefaultDomain_0&hash=item4192f86a$
2.68  sixteen-button keypad  http://www.ebay.ca/itm/4x4-Matrix-high-quality-Keyboard-Keypad-Use-Key-PIC-AVR-Stamp-Sml-/141687830020?pt=LH_DefaultDomain_0&hash=item20fd40b604
0.99  relay  http://www.ebay.ca/itm/5V-Relay-SIP-1A05-Reed-Switch-Relay-for-PAN-CHANG-Relay-4PIN-/221584731824?pt=LH_DefaultDomain_0&hash=item33977aaeb0
0.99  female headers  http://www.ebay.ca/itm/3Pcs-40pin-2-54mm-Single-Row-Straight-Female-Pin-Header-Strip-PBC-Arduino-TOP-/321470336172?pt=LH_DefaultDomain_0&hash=item4ad9200cac
1.30  two headphone jacks 2.5mm  http://www.ebay.com/itm/2pcs-2-5mm-Female-Audio-Connector-5-Pin-DIP-Headphone-Jack-Socket-PJ-202m-/121606507044?pt=LH_DefaultDomain_0&hash=item1c50500a24
2.68  motor coupler 4-7mm http://www.ebay.ca/itm/331236618242?_trksid=p2057872.m2749.l2649&var=540417689785&ssPageName=STRK%3AMEBIDX%3AIT
1.98  two RJ45 sockets http://www.ebay.ca/itm/NETWORK-Enthernet-RJ45-8-pin-CAT5-CAT5E-PCB-FEMALE-SHIELDING-SOCKET-JACK-US10-/331424637135?pt=LH_DefaultDomain_0&hash=item4d2a72a0cf
0.79  twenty five diodes 1N4004  http://www.ebay.ca/itm/321757635928
1.31  twenty resistors 33R 1W  http://www.ebay.ca/itm/391156925202

These are less essential parts
3.48  ten M3x35 bolts http://www.ebay.com/itm/10Pcs-50pcs-Metric-Thread-M3-304-Stainless-Steel-Hex-Socket-Head-Screw-Bolt-Nut-/321762484601?ssPageName=ADME:L:OU:CA:1120
3.00  fifty M3 x 12mm countersunk machine screws http://www.ebay.ca/itm/M3-x-12mm-Slot-Flat-Countersunk-head-Stainless-Steel-Machine-Screws-50-pcs-/171864291058?hash=item2803e8f6f2

I already had some other parts (resistors, capacitor, M3 nuts, wires, sheet metal for DIY brackets and metal enclosure etc.). I couldn't find good micro-switches (small enough, but with fairly long levers) on ebay, but I managed to find them in a local surplus store, 1$ apiece.

The essential non-trivial tools you'll need:
 - Drill press with a drill press vise. I almost ruined my Velbon Mag Slider by trying to drill the holes for the motor brackets with a hand-held drill. The Velbon is made of a special kind of hardened aluminum, with the nasty property that when one uses a hand drill to make a hole, the drill bit travels a lot sideways (can be 2-3mm), which will make it impossible to attach motor brackets properly. I ended up buying a drill press because of this. (But I always wanted to have one.) With a drill press one can do a much better job - just make sure the head doesn't move much sideways (<0.5mm), and make the exposed part of your drill bit fairly short (so it doesn't bend much).
 - Taps and dies set. You'll need these to cut a thread (M3 is about right) in the Velbon rail, for four bolts, to attach two motor brackets to the rail.
 - Fret saw (or copying saw): to make rectangular holes in the plastic (controller unit) and aluminum (motor unit) enclosures - for the two RJ-45 sockets, for the Nokia LCD display, and for the 16-keys keypad.

== Motor unit ==

The most critical step (don't do anything else until/unless you've succeeded with this one): proper coupling between the stepper motor and the focusing knob of the Velbon rail. Unfortunately the core of the focusing knob is made of (very hard) plastic, not metal. In addition, it has a hole in the middle (you'll see it once you remove the rubber covering of the knob), so one has to be very careful with creating the coupling to the motor. May be I was lucky, but I happened to have some old steel furniture screws laying around, with the threaded part which fitted perfectly the hole inside the focusing knob. I just had to carefully screw the bolt into the hole keeping it parallel to the knob axis, until the wider screw part touched the end of the knob. I didn't use any glue. At the end, the screw was sitting almost perfectly parallel to the knob's axis, and very tight (I couldn't turn it with my hand.) Another great feature of the screw was that the non-threaded part is a solid metal with exactly 7mm diameter. I managed to find on ebay a nice metal coupler from 7mm to 4mm (the shaft diameter of the stepper motor I used) which worked perfectly with the screw I had (I just had to cut off the head of the screw). I couldn't find identical furniture screws on ebay, but hopefully you can find something similar in a local store, or perhaps will come up with another idea on how to couple the plastic knob with the motor.

Warning: before doing anything to the focusing knob, you have to remove it from the Velbon rail - otherwise you will likely damage the mostly plastic bearings inside the rail. Once you attached the screw to the knob and cut off its head, you can put the knob back into the rail.

For the best possible coupling, I shaved a bit of metal on one side of the screw, and on one side of the motor shaft. Warining: the motor shaft is made of extremely hard steel, so no regular file will work on it (perhaps a diamond file will do the job - if you have one). I ended up using a sharpening stone, and spent quite a bit of efforts shaving off a small amount of steel from one side of the shaft. At the end it was worth the efforts as the coupling was very secure (once you tightened the small bolts inside the coupler).

The next critical step is to find (or make - as I did) two metal (best if steel or iron) brackets shaped like this : [ ] . They should be thick enough (probably at least 1.5mm; I used 3mm iron) to provide a good support to the motor unit, and should be made with a high accuracy: the longer side should have the same length for the both brackets, and the shorter sides should be exactly parallel, for each bracket. On one side the short ends will be attached to the Velbon rail (to the left and to the right from the focusing knob); you'll have to use a drill press to make four holes in the Velbon rail (very close to the edges of the rail - make sure the holes don't go inside the rail and potentially damage the rails' bearings), and then use taps and dies set to cut a thread inside the holes (I did M3 threading). The stepper motor will be attached to the opposite shorter sides of the brackets. (I used only two diagonally placed bolts in the motor to attach the motor to the two brackets; the remaining two bolts were left unattached). The length of the longer side of the brackets will be determined by the length of the focusing knob + the length of the exposed part of the screw you put inside the focusing knob + the length of the motor shaft. You don't have to be super-accurate here, as the coupler gives you a bit of a leeway in terms of the distance between the motor and the rail. Drilling the two holes for the motor in the short sides of the brackets should be the last operation here: you want to find such locacions for the holes that the motor shaft is almost exactly on the same axis as the focusing knob, or else the motor will not have enough of torque to move the rail. I accomplished this step by securing the coupler to the motor shaft (tightening a bolt), inserting the screw put inside the focusing knob inside the coupler (don't secure it with a bolt), and then finding the positions for the two holes on the short sides of the brackets for the two motor bolts.

The remaining steps are much less critical. One can put a metal (better aluminum) enclosure around the brackets, which has multiple purposes:
 - It simplifies attaching the small bread board with two connectors (RJ-45 and 2.5mm phone) to the motor unit.
 - It makes the motor attachment to the rail more tight and secure.
 - It hides all the wiring inside.
 - It prevents you from turning the focusing knob by hand - this is bad because it breaks the rail calibration, and it can also burn your motor driver (by induced voltage) if the controller is attached to the motor unit.
 - It looks nicer and more professional.

When designing the brackets and the enclosure, make sure that the bottom part of the assembly doesn't protrude beyond the bottom of the rail (specifically the top part of the rail, with the focusing knob), otherwise you won't be able to use the bottom part of the rail, with the manual knob to move your camera sideways. This is not absolutely essential, but it would be a pity if the bottom part of the rail was wasted, and the sideway motion knob does simplify the job of macro-photography.

Then you should make a small breadboard and solder there the two external connectors (RJ-45 and 2.5mm phone) and ideally a couple of internal connectors (for the motor and the limiting micro-switches; this will make it easier to disassemble the motor unit). 

Warning: My solution for connecting my DSLR to the rail using a Yongnuo camera shutter cord (which has a 2.5mm stereo phone plug on the other end) + a 2.5mm phone socket inside the motor unit is not a perfect one. First, I didn't realize that the socket I ordered is not a stereo one, despite having three connectors. (It proved to be a mono socket with a switch.) In the Yongnuo cable, the 2.5mm stereo phone plug has the shutter connector at the tip, and the autofocusing connector in the middle (the base is the ground). When I inserted the plug inside my mono socket, only the shutter and ground connectors worked properly; the AF connector ended up permanenly shorted to the ground. My controller unit only uses the shutter wire, so the rail still worked fine. But the AF contact shorted to the ground resulted in all camera buttons disabled. (So e.g. I couldn't turn the LiveView on or off.) I did a workaround: I shaved off insulation on one side of the Yongnuo cable untill I had an access to the three wires inside, and then cut the AF wire (colored ...). A better solution would be to buy 3.5mm stereo plug and matching socket, use the 3.5mm socket inside the motor unit, and replace the Yongnuo's 2.5mm plug with the 3.5mm one. One could also try to find a true stereo 2.5mm socket, but the only ones I could find on ebay didn't have the screw - they would only be supported by the contacts soldering to the breadboard, which could make it rather unreliable. The one I am using is securely screwed to the metal enclosure (plus it is soldered to the board), so should be very durable.

Warning 2: Using only the shutter wire works perfectly fine for focus stacking with my camera (Canon 50D), but this might not be the case with other models, and especially other makes. You have to make your own research on this. In particular, some camera makes would require that both AF and shutter wires to be shorted to the ground to make a shot. If that is the case, you'd have to modify a bit my design. I can suggest placing two relays (one for the shutter, the other one for AF) inside the motor unit, and using one Arduino pin to operate both. (In my design, I use one relay, and it is inside the controller unit.) Yongnuo makes a few different shutter cables for different cameras, so my rail is fairly universal in that regard. (You just need to have a separate shutter cable for each different camera you have.)

Finally, you need to attach the two limiting micro-switches to the rail, in a way that one of them would be triggered before the rail hits one of the physical limits. When a switch is triggered, there still should be enough of travel distance - around 3mm - left for the rail to properly decelerate and stop. The only way I could attach my micro-switches to the rail was by gluing them with a super-glue to the plastic cover of the rail, at a slight angle (to ensure there is the required 3mm gap when the switch is triggered). This worked pretty well. Then you have to solder the switches sequentially, in a way that normally (when switches are not engaged) the two wires going to the controller unit would be shorted, and only if one of the switches is triggered the connection would be broken. This is used by Arduino to calibrate the rail (to make sure that the rail will never trigger the switches during its normal operation.) With time the calibration will be lost, so a re-calibration would be required once in a while. Calibration is triggered automatically if during its normal work the moving rail will trigger on of the switches, or one can request a re-calibration manually.


== Controller unit ==

I managed to fit all other components (except for the batteries module) inside the small (125x80x32mm) plastic enclosure from ebay. Only one cable (Cat5/6) is connecting the controller unit to the motor unit, and one cable is connecting it to the power source (the battery module, or 10-12V AC power adapter.) There are three boards inside, all attached to the bottom of the enclosure via ~5mm long plastic spacers:

 - Arduino Uno R3 knockoff board. The side of the enclosure is perfect in the sense that the Arduino board fits it nicely in the horizontal position, with the USB and power sockets accessible from the outside (once you cut the corresponding holes in the side of the enclosure - use fret/copying saw for the rectangular hole).

 - Easidrive board (motor driver). This board is extremely small, and a bit of a challenge to be attached to the enclosure: I ended up shaving all sides of two M3 nuts to prevent them from shorting circuits on the board.

 - Breadboard with some other components soldered in: RJ-45 socket, a few voltage limiting resistors to connect the 5V Arduino to the 3.3V Nokia LCD display, and relay + 33 Ohm resistor + diod - for camera shutter triggering. This board is attached at the top of the enclosure.

Two more components are attached to the top part of the enclosure (you'll have to make corresponding rectangulat holes for them, with fret/copying saw):

 - Nokia 5110 LCD module.

 - 4x4 keys keypad.

The most time consuming part here is soldering all the required connections between these five components.

The power for the motor driver is taken directly from the Arduino's power plug. You'll have to solder the two wires, for - and +, directly to the Arduino plug, on the bottom of the board.

You have to check and recheck multiple times all the connections before attempting to power it on for the first time. It is especially critical for the camera shutter connectors: make it absolutely sure you are not sending high voltage inside your DSLR by mistake. test this with any new Cat5/6 cable you plan to use with the rail, as some of them can have different wiring (crossover / not crossover). I used the RJ-45 pins in the way that both crossover and straight Cat5/6 cables will work properly.

Warning: never let anyone to attach your rail to an networking device (computer, laptop, router) via Cat5/6 cable! I use RJ-45 sockets and Cat5/6 cables here for convenience; they have nothing to do with Ethernet. If somebody does attach the rail to another device, this will most likely burn the networking board on that device, and might also burn the motor driver in the controller unit. It wouldn't hurt to put a red label on your controller unit next to the RJ-45 socket with such a warning.


== Battery unit ==

Nothing to do here - just buy and use one of those 8-AA battery flat enclosures with a switch and a cable with a plug. Double check that the polarity of the plug matches that of the Arduino power socket.


 = Software = 

I keep improving and debugging my program. Currently, it has 15 different functions directly associated with each key on the 4x4 keypad, plus 13 more two-key combinations (always starting with the key "#"). Here is the list of the single-key and two-key functions (they often come in pairs):

Group A: Focus stacking keys

1, A: Rewind and Fast-forward. The action continues as long as you press the button. Theses motions (as all the motions in this rail) are done with a limit on acceleration/deceleration (to prevent damage to the rail bearings and the motor), and with a limit on the maximum speed (5 mm/s; at larger speeds the stepper motor looses too much torque and start skipping steps).

4, B: Set fore- and background points.

7, C: Go to to the fore/background points.

*, D: Initiate one-point focus stacking in the fore/background directions

0: Initiate two-point focus stacking. If the current position is not at one of the two stackoing points, the rail first travel to the nearest point, and then will initiate focus stacking while travelling to the other point.


Group B: Change parameters. One click moves to the next value in a 25-values table. Pressing and holding a key will result in a fast skipping through the table.

2, 3: Decrease / increase the parameter N_shots (only used in one-point stacking). Determines home many shots to take after pressing "*" or "D".

5, 6: Decrease / increase the parameter mm/frame. Determines the linear distance between the shots during focus stacking. Should be comparable to the depth of field of the macro lens.

8, 9: Decrease / increase the parameter FPS (frames per second). Normally the larger the better (faster focus stacking), but is limited by both the camera shutter and the flash recycle time (using flash at lower power will reduce the recycle time).


Group C: Using three registers, to permanently store most frequent parameter combinations (including coordinates of the two points for two-point stacking)

#2, #3: Save to / read from register 1.

#5, #6: Save to / read from register 2.

#8, #9: Save to / read from register 3.


Group D: Miscelaneous.

#1, #A: Step back / forward one frame (no shooting).

#4: Cycle through three levels of backlighting (none->1/2->full->none->...)

#7: Trigger camera shutter once.

#*: Factory reset. Sets all parameters to the initial values, then initiates rail calibration.

#B: Emergency breaking. Used for rare occasions when you loose control of the rail (due to a program bug).

#C: Initiates rail calibration.


The rail is used as follows.

1) Test how fast your camera can shoot with the rail (my Canon 50D can do up to 4 fps continuously with a fast memory card), and how fast your flash can recycle at the power level required (less power meens shorter recycle time). Usually flashes can do a short sequence very rapidly (a few fps) - useful for one-point stacking with live creatures, but have to be set to lower fps for longer sequences (studio work; usually done with two-point stacking). Specific example: my flash Yongnuo 560-II controlled via RF can do up to 125 shots at 1/16 power when doing 1 fps, and at least 150 shots when using 0.5 fps. Set the FPS rail parameter accordingly: the largest allowed value (say, 4 fps) for outdoor one-point shooting, and something like 1 fps or even 0.5 fps for studio work (when a large number of shots will be made).

2) Determine the depth of field for your macro lens (will depend mostly on magnification and f-number). This can be done experimentally (shoot a few short focus stacking sequences with varying mm/frame parameter), or estimated theoretically (serach wikipedia for macro DoF). Example: my best super-macro lens (produces 5:1 equivalent magniication when used in a reversed position on top of three extension tubes), Schneider 28 mm f/4 Componon enlarging lens, has DoF arounf 50 um when used wide open (when it is sharpest). Set the mm/frame rail parameter to be equal or a bit less than the DoF of your lens. This will ensure no sharpness gaps in the stacked photo.

3) 
